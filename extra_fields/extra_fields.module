<?php

/**
 * Implements hook_field_extra_fields().
 */

function extra_fields_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_types() as $type) {
    if ($type->has_title) {
      $extra['node'][$type->type]['display']['title'] = array(
        'label' => t('Extra field: !title', array('!title' => $type->title_label)),
        'weight' => -4,
        'type' => 'hidden',
      );
    }
    if($type->type == 'story'){
        $extra['node'][$type->type]['display']['created'] = array(
            'label' => t('Post Date'),
            'weight' => 0,
            'type' => 'hidden',
        );
        $extra['node'][$type->type]['display']['back_stories'] = array(
            'label' => t('Back Button'),
            'weight' => 0,
            'type' => 'hidden',
        );        
        $extra['node'][$type->type]['display']['image_tag'] = array(
            'label' => t('Image Tag'),
            'weight' => 0,
            'type' => 'hidden',
        );
    }
    if($type->type == 'event'){
      $extra['node'][$type->type]['display']['add_this'] = array(
        'label' => t('Extra field: Add to Calendar'),
        'weight' => 4,
        'type' => 'hidden',
      ); 
      $extra['node'][$type->type]['display']['event_detail'] = array(
        'label' => t('Extra field: Link to detail'),
        'weight' => -4,
        'type' => 'hidden',
      ); 
      $extra['node'][$type->type]['display']['time_only'] = array(
        'label' => t('Extra field: Time Only'),
        'weight' => -4,
        'type' => 'hidden',
      );
    }
  }
 
  //Taxonomy
  $info = entity_get_info('taxonomy_term');
  foreach (array_keys($info['bundles']) as $bundle) {
    $extra['taxonomy_term'][$bundle] = array(
      'display' => array(
        'title' => array(
          'label' => t('Extra Field: Title'),
          'weight' => 0,
          'type' => 'hidden',
        ),
      ),
    );
    if(($bundle == 'initiatives') || ($bundle == 'programs')){
      $extra['taxonomy_term'][$bundle]['display']['faq_link'] = array(
            'label' => t('Extra Field: FAQ Link'),
            'weight' => 0,
            'type' => 'hidden',
      ); 
    }
    if($bundle == 'initiatives'){
      $extra['taxonomy_term'][$bundle]['display']['activities_link'] = array(
            'label' => t('Extra Field: Activities Link'),
            'weight' => 0,
            'type' => 'hidden',
      );  
    }
    if($bundle == 'programs'){
      $extra['taxonomy_term'][$bundle]['display']['fellows_link'] = array(
            'label' => t('Extra Field: Fellows Link'),
            'weight' => 0,
            'type' => 'hidden',
      ); 
      $extra['taxonomy_term'][$bundle]['display']['fellows_link_2'] = array(
            'label' => t('Extra Field: Fellows Link 2'),
            'weight' => 0,
            'type' => 'hidden',
      ); 
    }
  }
  
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function extra_fields_node_view($node, $view_mode, $langcode) {
  // only return this in a non-full page situation
  if (!in_array($view_mode, array('default', 'full'))) {
    $node->content['title'] = array(
      '#theme' => 'extra_fields_title',
      '#node' => $node,
      '#view_mode' => $view_mode,
    ); 
  }
  if (in_array($view_mode, array('default', 'full'))) {
    $node->content['title'] = array(
      '#theme' => 'extra_fields_title_nolink',
      '#node' => $node,
      '#view_mode' => $view_mode,
    );  
  }
  if ($node->type == 'story'){
    $node->content['created'] = array(
      '#theme' => 'extra_fields_created',
      '#node' => $node,
      '#view_mode' => $view_mode
    );  
    $node->content['back_stories'] = array(
      '#theme' => 'extra_fields_back_stories',
      '#node' => $node,
      '#view_mode' => $view_mode
    );
  }
  if ($node->type == 'story' && in_array($view_mode, array('large_feature'))){  
    $node->content['image_tag'] = array(
      '#theme' => 'extra_fields_image_tag',
      '#node' => $node,
      '#view_mode' => $view_mode
    );
  }
  if ($node->type == 'event'){
      $node->content['time_only'] = array(
        '#theme' => 'extra_fields_time_only',
        '#node' => $node,
        '#view_mode' => $view_mode,
    ); 
    $node->content['event_detail'] = array(
        '#theme' => 'extra_fields_event_detail',
        '#node' => $node,
        '#view_mode' => $view_mode,
    );
  }
  if ($node->type == 'event' && in_array($view_mode, array('default', 'full'))) {
      $node->content['add_this'] = array(
      '#theme' => 'extra_fields_add_this',
      '#node' => $node,
      '#view_mode' => $view_mode,
    ); 
  }
}

function extra_fields_taxonomy_term_view($term, $view_mode, $langcode) {
    if(($term->vocabulary_machine_name == 'initiatives' || $term->vocabulary_machine_name == 'programs' )&& in_array($view_mode, array('full'))){
        $term->content['faq_link'] = array(
            '#theme' => 'extra_fields_term_faq_link',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
    }
    if($term->vocabulary_machine_name == 'initiatives' && in_array($view_mode, array('full'))){
        $term->content['activities_link'] = array(
            '#theme' => 'extra_fields_term_activities_link',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
    }
    if($term->vocabulary_machine_name == 'programs' && in_array($view_mode, array('full'))){
        $term->content['fellows_link'] = array(
            '#theme' => 'extra_fields_term_fellows_link',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
        $term->content['fellows_link_2'] = array(
            '#theme' => 'extra_fields_term_fellows_link',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
        $term->content['title'] = array(
            '#theme' => 'extra_fields_term_title_no_link',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
    }
    if(in_array($view_mode, array('taxonomy_card'))){
        $term->content['title'] = array(
            '#theme' => 'extra_fields_term_title',
            '#term' => $term,
            '#view_mode' => $view_mode,
        );
    }
}

/**
 * Implements hook_theme().
 */
function extra_fields_theme($existing, $type, $theme, $path) {
  return array(
    'extra_fields_title' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),
      'extra_fields_back_stories' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),
      'extra_fields_image_tag' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_created' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_title_nolink' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_term_title' => array(
      'variables' => array('term' => NULL, 'view_mode' => NULL),
    ),     
    'extra_fields_term_title_no_link' => array(
      'variables' => array('term' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_term_faq_link' => array(
      'variables' => array('term' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_term_activities_link' => array(
      'variables' => array('term' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_term_fellows_link' => array(
      'variables' => array('term' => NULL, 'view_mode' => NULL),
    ),
    'extra_fields_add_this' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),   
    'extra_fields_time_only' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ),      
    'extra_fields_event_detail' => array(
      'variables' => array('node' => NULL, 'view_mode' => NULL),
    ), 
  );
}

function theme_extra_fields_created($variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $output = '<div class="node-created">';
  $output .= date('F j, Y', $node->created);
  $output .= '</div>';
  return $output;
}
function theme_extra_fields_image_tag($variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $entity_uri = entity_uri('node', $node);
  $title = '';
  $output = '';
  if($view_mode == 'large_feature'){
      $story_type = $node->field_story_type[LANGUAGE_NONE][0]['tid'];
      switch($story_type){
          case '33':
              $title .= 'watch >';
          break;
          case '34':
              $title .= 'listen >';
          break;
          default:
              $title .= 'read >';
          break;
      }
  }
  $output = '<span class="type-link">' . l($title, $entity_uri['path'], array('html' => TRUE)) . '</span>';
  return $output;
}

function theme_extra_fields_back_stories($variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $output = '<div class="back-button">';
  $output .= l('Browse All Stories', 'action');
  $output .= '</div>';
  return $output;
}

function theme_extra_fields_term_title($variables){
    $term = $variables['term'];
    $vocabulary = $term->vocabulary_machine_name;
    $name = $term->name;
    $entity_uri = entity_uri('taxonomy_term', $term);
    $output = '<h2 class="taxonomy-title">';
    if($vocabulary == 'research'){
        $output .= t($name);
    }else{
        $output .= l($name, $entity_uri['path']);
    }
    $output .= '</h2>';
    return $output;
}

function theme_extra_fields_term_title_no_link($variables){
    $term = $variables['term'];
    $vocabulary = $term->vocabulary_machine_name;
    $name = $term->name;
    $output = '<h2 class="taxonomy-title">';
    $output .= t($name);
    $output .= '</h2>';
    return $output;
}

function theme_extra_fields_term_faq_link($variables){
    $term = $variables['term'];
    $name = $term->name;
    $current_path = drupal_get_path_alias();
    $output = '';
    if(!empty($term->field_faq[LANGUAGE_NONE])){
        $output = l('FAQ', '/' . $current_path . '/faq');
    }
    return $output;
}

function theme_extra_fields_term_activities_link($variables){
    $term = $variables['term'];
    $name = $term->name;
    $tid = $term->tid;
    $current_path = drupal_get_path_alias();
    $output = '';
    //Check view results to see if loaded initiative has any activities
    $view = views_get_view_result('programs', 'page','NULL', $tid);
    $result = count($view);
    if ($result) {
        $output = l('Initiative Activities', '/' . $current_path . '/activities');
    }
    return $output;
}
function theme_extra_fields_term_fellows_link($variables){
    $term = $variables['term'];
    $name = $term->name;
    $tid = $term->tid;
    $current_path = drupal_get_path_alias();
    $output = '';
    //Check view results to see if loaded initiative has any activities
    $view = views_get_view_result('program_fellows', 'page','NULL', $tid);
    $result = count($view);
    if ($result) {
        $output = l('meet the ' . $name . ' Fellows', '/' . $current_path . '/fellows', array('attributes' => array('class' => array('fellows-link'))));
    }
    return $output;
}

function theme_extra_fields_title($variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $entity_uri = entity_uri('node', $node);
  $title = $node->title;
  
 if($node->type == 'story'  && $view_mode != 'large_feature'){
      $story_type = $node->field_story_type[LANGUAGE_NONE][0]['tid'];
      switch($story_type){
          case '33':
              $title .= '. <span class="type-link">watch></span>';
          break;
          case '34':
              $title .= '. <span class="type-link">listen></span>';
          break;
          default:
              $title .= '. <span class="type-link">read></span>';
          break;
      }
  }
  
  $link_title = l($title, $entity_uri['path'], array('html' => TRUE));
  
  if($node->type == 'group_networks'){
      $link_title = $title;
  }
  
  $output = '<h2 class="node-title">';
  $output .= $link_title;
  $output .= '</h2>';
  return $output;
}

function theme_extra_fields_title_nolink($variables) {
  $node = $variables['node'];
  $link_title = $node->title;
  
  $output = '<h2 class="node-title">';
  $output .= $link_title;
  $output .= '</h2>';
  return $output;
}

function theme_extra_fields_add_this($variables) {
  $node = $variables['node'];
  $eventTimeRaw = strtotime($node->field_event_date[LANGUAGE_NONE][0]['value']);
  $startDate = format_date($eventTimeRaw, $type = 'custom', $format='m/d/Y H:i');
  
  
  $output = '<div class="add-event-button"><div title="" class="addeventatc" id="addeventatc1" aria-controls="addeventatc1-drop" aria-expanded="false" tabindex="0" style="visibility: visible;"> add to calendar';
  $output .= '<span class="timezone atc_node">America/New_York</span>';
  $output .= '<span class="title atc_node">' . $node->title . '</span>';
  $output .= '<span class="start atc_node">' . $startDate . '</span>';
  if(!empty($node->body)){
    $teaser = $node->body[LANGUAGE_NONE][0]['safe_value'];
    $output .= '<span class="description atc_node">' . $teaser. '</span>';
  }
  if(!empty($node->field_event_location)){
    $location = $node->field_event_location[LANGUAGE_NONE][0]['title'];
    $output .= '<span class="location atc_node">' . $location . '</span>';
  }
  $output .= '<span class="date_format atc_node">MM/DD/YYYY</span>';
  $output .= '</div></div>';
  return $output;
}

function theme_extra_fields_time_only($variables) {
  $node = $variables['node'];
  if(!empty($node->field_event_date)){
      $date1 = strtotime($node->field_event_date[LANGUAGE_NONE][0]['value']);
      $date2 = strtotime($node->field_event_date[LANGUAGE_NONE][0]['value2']);
      $time_only1 = format_date($date1, 'time_only');
      $time_only2 = format_date($date2, 'time_only');
      if(($date1 == $date2) && ($time_only1 == '12:00AM')){
          $output = '<div class="time-only">All Day</div>';
      }else if(($date1 == $date2) && ($time_only1 == $time_only2)){
          $output = '<div class="time-only">' . $time_only1 . '</div>';
      }
      else{
        $output = '<div class="time-only">' . $time_only1 . ' to ' . $time_only2 . '</div>';
      }
      return $output;
  }
}

function theme_extra_fields_event_detail($variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $entity_uri = entity_uri('node', $node);
  $link = l('more>', $entity_uri['path']);
  
  $output = '<div class="link-to-event">' . $link . '</div>';
  return $output;
}

/* Features implementation for exporting extra fields information */

/**
 * Implements hook_features_api.
 */
function extra_fields_features_api() {
  return array(
    'extra_fields' => array(
      'name' => t('Extra fields'),
      'default_hook' => 'extra_fields_info',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'features_source' => TRUE,
      'file' => drupal_get_path('module', 'extra_fields') .'/extra_fields.features.inc',
    ),
  );
}